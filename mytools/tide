#!/bin/bash

set -e

# Requirement: tmux

# Usage
USAGE='
tide:
    My Integrated Development Environment using Tmux (tmux_ide)

USAGE:
    tide -n [WINDOW_NAME] -t [WINDOW_TYPE]

DESCRIPTION:
    Terminal partitioning for development environment using Tmux.

EXAMPLE:
    tide                     Make tmux named "home"
    tide -n Rust             Make tmux named "Rust"
    tide -t 2                Make window type 2 (2x2 window)

OPTIONS:
    -h, --help              Print help
    -n, --name [NAME]       Name of tmux window [default: home]
    -t, --type {1,2,3}      Type of window. Choose {1,2,3}.
                            type1 means 2+3 window, type2 means 2x2 window, type3 means 1+1 window [default: 1]
    -x, --top-off           Do not put on top on the right edge [default: not set]
    -c, --cmd [command]     Command to run after log into tmux
'

# default setting
tmux_window_name="home"
window_type="1"
top_off=0
# start_path=""
cmd=""

# tmux check
if [ ! -x $(which tmux) ]; then
    echo "[ERROR] tmux is not found" >&2
    exit 1
fi

# option parser
while :;
do
    case $1 in
        -h | --help)
            echo "$USAGE" >&1
            exit 0
            ;;
        -n | --name) OPTARG=$2
            if [ -z "$OPTARG" ]; then
                echo "[ERROR] WINDOW_NAME is necessary, if -n/--name option is present" >&2
                exit 1
            fi
            tmux_window_name=$OPTARG
            shift
            ;;
        -t | --type) OPTARG=$2
            if [ -z "$OPTARG" ]; then
                echo "[ERROR] window_type is necessary, if -t/--type options is present" >&2
                exit 1
            fi
            if [ $OPTARG == "1" ]; then
                echo "[INFO] window type is \"type1\"" >&1
                window_type="1"
            elif [ $OPTARG == "2" ]; then
                echo "[INFO] window type is \"type2\"" >&1
                window_type="2"
            elif [ $OPTARG == "3" ]; then
                echo "[INFO] window type is \"type3\"" >&1
                window_type="3"
            else
                echo "[ERROR] window_type is must be \"1\" or \"2\"" >&2
                exit 1
            fi
            shift
            ;;
        -x | --top-off)
            top_off=1
            ;;
        # -p | --path)
        #     if [ -z "$2" ]; then
        #         echo "[ERROR] path is necessary, if -p/--path option is present" >&2
        #         exit 1
        #     fi
        #     start_path="$2"
        #     shift
        #     ;;
        -c | --cmd)
            if [ -z "$2" ]; then
                echo "[ERROR] command is necessary, if -c/--cmd option is present" >&2
                exit 1
            fi
            cmd="$2"
            shift
            ;;
        --)
            shift
            break
            ;;
        -?*)
            echo "[ERROR] Unknown option : ${1}" >&2
            exit 1
            ;;
        *)
            break
    esac
    shift
done
echo "[INFO] Start making tmux named \"$tmux_window_name\"" >&1


tmux new -s $tmux_window_name -d


if [ $window_type == "1" ]; then
    tmux split-window -h
    tmux split-window -v
    tmux split-window -v
    tmux select-pane -t 0
    tmux split-window -v
    tmux select-pane -t 2 && tmux resize-pane -D 35
    tmux select-pane -t 4 && tmux resize-pane -D 8
    [ $top_off -eq 0 ] && tmux send-keys -t 4 "top" C-m
    tmux select-pane -t 0

    if [ -n "$cmd" ]; then
        for i in {0..4};
        do
            if [ $i -eq 4 ] && [ $top_off -eq 0 ]; then
                break
            fi
            tmux send-keys -t $i "$cmd" C-m
        done
    fi
fi


if [ $window_type == "2" ]; then
    tmux split-window -h
    tmux split-window -v
    tmux select-pane -t 0
    tmux split-window -v
    [ $top_off -eq 0 ] && tmux send-keys -t 3 "top" C-m
    tmux select-pane -t 0

    if [ -n "$cmd" ]; then
        for i in {0..3};
        do
            if [ $i -eq 3 ] && [ $top_off -eq 0 ]; then
                break
            fi
            tmux send-keys -t $i "$cmd" C-m
        done
    fi
fi

if [ $window_type == "3" ]; then
    tmux split-window -h
    tmux select-pane -t 0
    if [ -n "$cmd" ]; then
        for i in {0..1};
        do
            tmux send-keys -t $i "$cmd" C-m
        done
    fi
fi

echo "[INFO] Make tmux named \"$tmux_window_name\""
echo "[INFO] tmux ls Result" >&1
tmux ls

tmux a
